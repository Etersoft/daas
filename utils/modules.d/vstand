#!/bin/sh

[ -n "$DAAS_DEBUG" ] && set -x
[ -z "$DAAS_DATADIR" ] && DAAS_DATADIR='..'

. $DAAS_DATADIR/modules.d/.daas-common

[ -z "$GITLAB_RUNNER_REGISTRATION_TOKEN" ] && GITLAB_RUNNER_REGISTRATION_TOKEN=''
USER_DNS_SERVERS=''
USER_CONSUL_SERVERS=''
STAND_HOST=''
VADMIN_USER=''
VADMIN_PASS=''
HOST_USER=''
HOST_PASS=''

module_usage() {
    echo " "
    echo "Usage: vstand command [options]"
    echo " "
    echo "Commads for host machine:"
    echo "-------------------------"
    echo "init hostname [ext options] -- [ansible options]                     - prepare a host for deployment of stands"
    echo " "
    echo "Commands for virtual stand:"
    echo "---------------------------"
    echo "create hostname [ project.yml ] [ext options] -- [ansible options]   - create vstand for project"
    echo "                                                                       Default project file '.daas.yml'"
    echo " "
    echo "setup hostname [ project.yml ] [ext options] -- [ansible options]    - setup vstand for project"
    echo "                                                                       Default project file '.daas.yml'"
    echo " "
    echo "show [defaults|config] [ project.yml ]                               - Show config parameters"
    echo "                                                                       default - show default parameters"
    echo "                                                                       configs - show merged parameters"
    echo "Ext options:"
    echo "------------"
    echo "-s|--stand-config vstand-config.yml  - config (yaml) for vstand"
    echo "-c|--config daas.yml                 - config (yaml) for project"
    echo "--host-user name                     - host user on the hostmachine. Default: use from config"
    echo "--host-password pass                 - password of user on the hostmachine. Default: use from config"
    echo "-v|--variable var=val                - added variable for ansible (can be used multiple times)"
    echo "--hostname name                      - Set name for hostname"
    echo "--dns nameserver                     - Add nameserver (can be used multiple times)"
    echo "--consul-server server               - Consul server for registration (can be used multiple times)"
    echo "-u|--user name                       - admin user on the stand. Default: use from config"
    echo "-p|--password pass                   - admin password on the stand. Default: use from config"
    echo "--gitlab-token token                 - gitlab-runner registration token for gitlab. Default use from vstand config file"
    echo " "
}

module_help() {
    module_usage
}

module_error() {
    echo "ERROR: $1"
    exit 1
}

split_options() {
    [ -z "$PROG" ] && PROG="${0##*/}"

    DAAS_ANSIBLE_USER_VARS=''

    TEMP=$(getopt -n $PROG -o c:,s:,u:,v:,p: -l config:,stand-config:,user:,password:,variable:,gitlab-token:,dns:,hostname:,consul-server:,host-user:,host-password: -- "$@") || return 1
    eval set -- "$TEMP"

    while :; do
        case "$1" in
            -u | --user)
                shift
                [ "$1" == '--' ] && break
                VADMIN_USER="$1"
                ;;
            -p | --password)
                shift
                [ "$1" == '--' ] && break
                VADMIN_PASS="$1"
                ;;
            --host-user)
                shift
                [ "$1" == '--' ] && break
                HOST_USER="$1"
                ;;
            --host-password)
                shift
                [ "$1" == '--' ] && break
                HOST_PASS="$1"
                ;;
            -s | --stand-config)
                shift
                [ "$1" == '--' ] && break
                DAAS_VSTAND_CONFIG="$1"
                ;;
            -c | --config)
                shift
                [ "$1" == '--' ] && break
                DAAS_PROJECT_CONFIG="$1"
                ;;
            -v | --variable)
                shift
                [ "$1" == '--' ] && break
                DAAS_ANSIBLE_USER_VARS="${DAAS_ANSIBLE_USER_VARS} -e $1"
                ;;
            --dns)
                shift
                [ "$1" == '--' ] && break
                USER_DNS_SERVERS="${USER_DNS_SERVERS} $1"
                ;;
            --hostname)
                shift
                [ "$1" == '--' ] && break
                DAAS_ANSIBLE_USER_VARS="${DAAS_ANSIBLE_USER_VARS} -e user_hostname=$1"
                ;;
            --consul-server)
                shift
                [ "$1" == '--' ] && break
                USER_CONSUL_SERVERS="${USER_CONSUL_SERVERS} $1"
                ;;
            --gitlab-token)
                shift
                [ "$1" == '--' ] && break
                GITLAB_RUNNER_REGISTRATION_TOKEN="$1"
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done

    OTHER=$@
}

add_user_dns_servers() {

    [ -z "$USER_DNS_SERVERS" ] && return
    [ -n "$1" ] && DNS_VAR_NAME="$1" || DNS_VAR_NAME='user_dns_servers'

    local DNS_VAR=''

    for dns in $USER_DNS_SERVERS; do
        [ -n "$DNS_VAR" ] && DNS_VAR="${DNS_VAR},'$dns'" || DNS_VAR="'$dns'"
    done
    echo "-e $DNS_VAR_NAME=[$DNS_VAR]"
}

add_user_consul_servers() {

    [ -z "$USER_CONSUL_SERVERS" ] && return
    [ -n "$1" ] && CONSUL_VAR_NAME="$1" || CONSUL_VAR_NAME='user_consul_servers'

    local CONSUL_VAR=''

    for srv in $USER_CONSUL_SERVERS; do
        [ -n "$CONSUL_VAR" ] && CONSUL_VAR="${CONSUL_VAR},'$srv'" || CONSUL_VAR="'$srv'"
    done
    echo "-e $CONSUL_VAR_NAME=[$CONSUL_VAR]"
}

prepare_ansible_environment() {

    export ANSIBLE_CONFIG=$DAAS_ANSIBLE_CONFIG

    DAAS_ANSIBLE_EXTRA_ARGS="$DAAS_ANSIBLE_EXTRA_ARGS"

    local ANSIBLE_ENV="-e daas_vstand_config=$(realpath $DAAS_VSTAND_CONFIG) -e daas_data_dir=$(realpath $DAAS_DATADIR) -e daas_ansible_dir=$(realpath $DAAS_ANSIBLE_D) -e daas_repository_dir=$(realpath $DAAS_REPOSITORY_D)"

    [ -n "$VADMIN_USER" ] && ANSIBLE_ENV="$ANSIBLE_ENV -e vstand_user_login=$VADMIN_USER"
    [ -n "$VADMIN_PASS" ] && ANSIBLE_ENV="$ANSIBLE_ENV -e vstand_user_pass=$VADMIN_PASS"
    [ -n "$HOST_USER" ] && ANSIBLE_ENV="$ANSIBLE_ENV -e hostmachine_user_login=$HOST_USER"
    [ -n "$HOST_PASS" ] && ANSIBLE_ENV="$ANSIBLE_ENV -e hostmachine_user_pass=$HOST_PASS"

    [ -n "$DAAS_DEBUG" ] && ANSIBLE_DEBUG="-vvv" || ANSIBLE_DEBUG=''

    local DNS_SERVERS=$(add_user_dns_servers)
    local CONSUL_SERVERS=$(add_user_consul_servers)

    DAAS_ANSIBLE_EXTRA_ARGS="$DAAS_ANSIBLE_EXTRA_ARGS $DNS_SERVERS $CONSUL_SERVERS $ANSIBLE_ENV"
}

do_init_host() {
    echo "init host '$STAND_HOST'.."

    check_config_files "init"

    if ! ping -c 1 -w 1 $STAND_HOST 1>/dev/null 2>/dev/null; then
        echo "ERROR: '$STAND_HOST' does not respond"
        return 1
    fi

    local INVFILE=$(mktemp)
    echo "[vstands]" >$INVFILE
    echo "new-vstand ansible_host=$STAND_HOST" >>$INVFILE

    prepare_ansible_environment

    ansible-playbook -i $INVFILE ${DAAS_ANSIBLE_EXTRA_ARGS} ${DAAS_ANSIBLE_USER_VARS} --ssh-extra-args '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' -l new-vstand $@ ${DAAS_ANSIBLE_D}/playbooks/host-init.yml

    RET=$?
    rm -rf $INVFILE
    return $RET
}

do_create_stand() {

    check_config_files "create"

    PROJECT_NAME=$(daas-project name -c $DAAS_PROJECT_CONFIG)
    echo "Create stand for '$PROJECT_NAME' on '$STAND_HOST'.."
    local INVFILE=$(mktemp)
    echo "[vstands]" >$INVFILE
    echo "vstand ansible_host=$STAND_HOST" >>$INVFILE

    prepare_ansible_environment

    DAAS_ANSIBLE_EXTRA_ARGS="${DAAS_ANSIBLE_EXTRA_ARGS} -e daas_project_config=$(realpath $DAAS_PROJECT_CONFIG)"

    local DAAS_NEWSTAND_IP=$(mktemp)
    DAAS_ANSIBLE_EXTRA_ARGS="${DAAS_ANSIBLE_EXTRA_ARGS} -e daas_newstand_ip_file=$DAAS_NEWSTAND_IP"

    ansible-playbook -i $INVFILE -l vstand \
        ${DAAS_ANSIBLE_EXTRA_ARGS} \
        ${DAAS_ANSIBLE_USER_VARS} \
        --ssh-extra-args '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' \
        $ANSIBLE_DEBUG $@ \
        ${DAAS_ANSIBLE_D}/playbooks/vstand-create.yml

    RET=$?
    rm -rf $INVFILE
    echo "NEW STAND IP: $(cat $DAAS_NEWSTAND_IP)"
    rm -rf $DAAS_NEWSTAND_IP

    return $RET
}

do_setup_stand() {

    check_config_files "setup"

    PROJECT_NAME=$(daas-project name -c $DAAS_PROJECT_CONFIG)
    echo "Prepare stand for '$PROJECT_NAME' on '$STAND_HOST'.."

    if ! ping -c 1 -w 1 $STAND_HOST 1>/dev/null 2>/dev/null; then
        echo "ERROR: '$STAND_HOST' does not respond"
        return 1
    fi

    local INVFILE=$(mktemp)
    echo "[vstands]" >$INVFILE
    echo "vstand ansible_host=$STAND_HOST" >>$INVFILE

    prepare_ansible_environment

    DAAS_ANSIBLE_EXTRA_ARGS="${DAAS_ANSIBLE_EXTRA_ARGS} -e daas_project_config=$(realpath $DAAS_PROJECT_CONFIG)"

    [ -n "$GITLAB_RUNNER_REGISTRATION_TOKEN" ] && DAAS_ANSIBLE_EXTRA_ARGS="${DAAS_ANSIBLE_EXTRA_ARGS} -e gitlab_runner_registration_token=$GITLAB_RUNNER_REGISTRATION_TOKEN"

    ansible-playbook -i $INVFILE -l vstand \
        ${DAAS_ANSIBLE_EXTRA_ARGS} \
        ${DAAS_ANSIBLE_USER_VARS} \
        --ssh-extra-args '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' \
        $ANSIBLE_DEBUG $@ \
        ${DAAS_ANSIBLE_D}/playbooks/vstand-setup.yml

    RET=$?
    rm -rf $INVFILE

    return $RET
}

do_check() {

    check_config_files "check"

    PROJECT_NAME=$(daas-project name -c $DAAS_PROJECT_CONFIG)
    echo "Check '$PROJECT_NAME' on '$STAND_HOST'.."

    if ! ping -c 1 -w 1 $STAND_HOST 1>/dev/null 2>/dev/null; then
        echo "ERROR: '$STAND_HOST' does not respond"
        return 1
    fi

    local INVFILE=$(mktemp)
    echo "[vstands]" >$INVFILE
    echo "vstand ansible_host=$STAND_HOST" >>$INVFILE

    prepare_ansible_environment

    DAAS_ANSIBLE_EXTRA_ARGS="${DAAS_ANSIBLE_EXTRA_ARGS} -e daas_project_config=$(realpath $DAAS_PROJECT_CONFIG)"

    ansible-playbook -i $INVFILE -l vstand \
        ${DAAS_ANSIBLE_EXTRA_ARGS} \
        ${DAAS_ANSIBLE_USER_VARS} \
        --ssh-extra-args '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' \
        $ANSIBLE_DEBUG $@ \
        ${DAAS_ANSIBLE_D}/playbooks/vstand-check.yml

    RET=$?
    rm -rf $INVFILE

    return $RET
}

do_show_configs() {

    if [ "$SHOW_COMMAND" == "defaults" ]; then
        DAAS_VSTAND_CONFIG="$DAAS_ANSIBLE_D/daas-dummy-config.yml"
        DAAS_PROJECT_CONFIG="$DAAS_VSTAND_CONFIG"
    fi

    check_vstand_config_file "show"

    if ! test -f "$DAAS_PROJECT_CONFIG"; then
        DAAS_PROJECT_CONFIG="$DAAS_ANSIBLE_D/daas-dummy-config.yml"
    fi

    PROJECT_NAME=$(daas-project name -c $DAAS_PROJECT_CONFIG)

    local INVFILE=$(mktemp)
    echo "[vstands]" >$INVFILE
    echo "vstand ansible_host=localhost" >>$INVFILE

    prepare_ansible_environment

    [ -n "$DAAS_DEBUG" ] && ANSIBLE_DEBUG="-vvv" || ANSIBLE_DEBUG=''

    DAAS_ANSIBLE_EXTRA_ARGS="${DAAS_ANSIBLE_EXTRA_ARGS} -e daas_project_config=$(realpath $DAAS_PROJECT_CONFIG)"

    [ -n "$GITLAB_RUNNER_REGISTRATION_TOKEN" ] && DAAS_ANSIBLE_EXTRA_ARGS="${DAAS_ANSIBLE_EXTRA_ARGS} -e gitlab_runner_registration_token=$GITLAB_RUNNER_REGISTRATION_TOKEN"

    case $SHOW_COMMAND in
        config)
            ansible-playbook -i $INVFILE ${DAAS_ANSIBLE_EXTRA_ARGS} ${DAAS_ANSIBLE_USER_VARS} --ssh-extra-args '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' -l vstand $ANSIBLE_DEBUG $@ ${DAAS_ANSIBLE_D}/playbooks/vstand-show-config.yml
            ;;
        defaults)
            ansible-playbook -i $INVFILE ${DAAS_ANSIBLE_EXTRA_ARGS} ${DAAS_ANSIBLE_USER_VARS} --ssh-extra-args '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null' -l vstand $ANSIBLE_DEBUG $@ ${DAAS_ANSIBLE_D}/playbooks/vstand-show-defaults.yml
            ;;
        *)
            echo "Unknown command '$SHOW_COMMAND' for show. Use: daas vstand --help for help "
            RET=1
            ;;
    esac

    [ -z "$RET" ] && RET=$?
    rm -rf $INVFILE
    return $RET
}

[ -z "$1" ] && module_help && exit 1

case $1 in
    -h | --help | help)
        module_help
        exit 0
        ;;
    --usage | usage)
        module_usage
        exit 0
        ;;
    --init | init)
        shift
        split_options $@
        eval set -- "$OTHER"

        [ -z "$1" ] && module_error "Unknown hostname. Use: daas vstand --help for help"
        STAND_HOST="$1"
        shift

        do_init_host $@
        exit $?
        ;;
    --create | create)
        shift
        split_options $@
        eval set -- "$OTHER"

        [ -z "$1" ] && module_error "Unknown hostname. Use: daas vstand --help for help"
        STAND_HOST="$1"
        shift

        do_create_stand $@
        exit $?
        ;;
    --setup | setup)
        shift
        split_options $@
        eval set -- "$OTHER"

        [ -z "$1" ] && module_error "Unknown hostname. Use: daas vstand --help for help"
        STAND_HOST="$1"
        shift

        do_setup_stand $@
        exit $?
        ;;
    --show | show)
        shift
        [ -z "$1" ] && module_error "Unknown show command (defaults|config). Use: daas vstand --help for help"
        SHOW_COMMAND="$1"
        shift

        split_options $@
        eval set -- "$OTHER"

        do_show_configs $@
        exit $?
        ;;
    --check | check)
        shift
        split_options $@
        eval set -- "$OTHER"

        [ -z "$1" ] && module_error "Unknown hostname. Use: daas vstand --help for help"
        STAND_HOST="$1"
        shift

        do_check $@
        exit $?
        ;;
    *)
        module_usage && exit 1
        ;;
esac
