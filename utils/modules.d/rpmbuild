#!/bin/sh

[ -n "$DAAS_DEBUG" ] && set -x
[ -z "$DAAS_DATADIR" ] && DAAS_DATADIR='..'

. $DAAS_DATADIR/modules.d/.daas-common

BUILDER=''
PUBDIR=''
ENVOPTS=''
VOLUMES=''
BUILD_CCACHE_DIR=''

[ -z "$DAAS_BUILD_USER" ] && DAAS_BUILD_USER='builder'
DATADIR='/data'

module_usage() {
    echo " "
    echo "Usage: rpmbuild container_name [ext options] [build_command | clean] [params...]"
    echo "  "
    echo "builder_name  - name of builder container (in daas.yml)"
    echo "build_command - command for build in container."
    echo "clean         - remove build directory"
    echo "Ext options:"
    echo "-d|--directory pubdir - use pubdir for RPM directory. Default 'container_name/RPM'"
    echo "-v|--volume dir       - bind mount a volume (can be used multiple times)"
    echo "-c|--ccache dir       - Use 'dir' for ccache."
    echo "--use-ccache          - Use env variable CCACHE_DIR for ccache"
    echo "--copy-sources        - Build with a copy of the source code. Default: build with current git directory"
}

module_help() {
    module_usage
}

module_error() {
    echo "ERROR: $1"
    exit 1
}

prepare_sources() {
    COMMIT=$1
    OUTDIR=$2
    #git archive --format=tar $COMMIT | tar xf - -C $OUTDIR
    #rm -rf $OUTDIR/*
    #git archive --format=tar --output $OUTDIR/source.tar.gz $COMMIT

    mkdir -p $OUTDIR/git-$COMMIT

    # для rpmbb нужно, чтобы каталог git тоже копировался (т.к. идёт сборка из git)
    git clone $(git rev-parse --show-toplevel) $OUTDIR/git-$COMMIT
    tar -cf $OUTDIR/source.tar -C $OUTDIR/git-$COMMIT .
    rm -rf $OUTDIR/git-$COMMIT
}

prepare_build_environment() {
    WORKDIR=$(pwd)

    prepare_project_environment "build"

    if ! test -d "$DAAS_OUTDIR/$BUILDER"; then
        module_error "(${FUNCNAME[0]}): Not found builder '$BUILDER'"
    fi

    BUILDER_DIR=$WORKDIR/$DAAS_OUTDIR/${BUILDER}
    SOURCEDIR="$WORKDIR/$DAAS_OUTDIR/${BUILDER}/${DATADIR}"
    RPMDIR="$WORKDIR/$DAAS_OUTDIR/$BUILDER/RPM"
    [ -n "$PUBDIR" ] && RPMDIR=$(realpath $PUBDIR)
}

split_options() {
    PUBDIR=''
    ENVOPTS=''
    VOLUMES=''
    OTHER=''
    BUILD_CCACHE_DIR=''
    BUILD_COPY_SOURCES=''
    [ -z "$PROG" ] && PROG="${0##*/}"

    TEMP=$(getopt -n $PROG -o d:,e:,c: -l directory:,environment:,ccache:,use-ccache,copy-sources -- "$@") || return 1
    eval set -- "$TEMP"

    while :; do
        case "$1" in
            -d | --directory)
                shift
                [ "$1" == '--' ] && break
                PUBDIR="$1"
                ;;
            -v | --volume)
                shift
                [ "$1" == '--' ] && break
                VOLUMES="${VOLUMES} -v $1"
                ;;
            -e | --environment)
                shift
                [ "$1" == '--' ] && break
                ENVOPTS="${ENVOPTS} -e $1"
                ;;
            -c | --ccache)
                shift
                [ "$1" == '--' ] && break
                BUILD_CCACHE_DIR="$1"
                ;;
            --use-ccache)
                BUILD_CCACHE_DIR="${CCACHE_DIR}"
                ;;
            --copy-sources)
                BUILD_COPY_SOURCES="1"
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done

    OTHER=$@
}

run_build() {
    BUILD_CMD="$@"
    echo "in container '$BUILDER' run build command '$BUILD_CMD'"

    prepare_build_environment

    mkdir -p ${SOURCEDIR}
    mkdir -p ${RPMDIR}
    # чтобы пользователь под которым происходит сборка мог писать в этим каталоги
    # т.к по умолчанию они монтируются под root
    chmod a+rw ${RPMDIR}
    chmod a+rw ${SOURCEDIR}

    BUILD_ENV="-e DAAS_BUILD_USER=$DAAS_BUILD_USER -e DATADIR=$DATADIR"

    COMMIT=$(git log -1 --pretty=format:"%h")
    GIT_ROOT=$(git rev-parse --show-toplevel)
    if [ -n "$BUILD_COPY_SOURCES" ]; then
        cd $GIT_ROOT
        prepare_sources "$COMMIT" "$SOURCEDIR"
        cd -
        BUILD_ENV="$BUILD_ENV -e SOURCE=$DATADIR/source.tar"
    else
        VOLUMES="$VOLUMES -v $GIT_ROOT:$DATADIR/src"
    fi

    if [ -n "$BUILD_CCACHE_DIR" ]; then

        if ! test -d $BUILD_CCACHE_DIR; then
            mkdir -p $BUILD_CCACHE_DIR
            chmod a+rw $BUILD_CCACHE_DIR
        fi

        BUILD_ENV="$BUILD_ENV -e CCACHE_DIR=/daas-ccache -e GCC_USE_CCACHE=1"
        VOLUMES="$VOLUMES -v $(realpath $BUILD_CCACHE_DIR):/daas-ccache"
    fi

    cd $DAAS_OUTDIR/$BUILDER
    docker-compose build --build-arg USER_UID=$(id -u) --force-rm || return 1

    # test ccache directory permissions
    if [ -n "$BUILD_CCACHE_DIR" ]; then
        if ! docker-compose run --rm $BUILD_ENV ${VOLUMES} -T $BUILDER touch /daas-ccache/test 2>/dev/null; then
            echo "Can't write to ccache directory '$BUILD_CCACHE_DIR' from container. Use: 'chmod a+rw $BUILD_CCACHE_DIR'"
            return 1
        fi
    fi

    # prepare sources
    if [ -n "$BUILD_COPY_SOURCES" ]; then
        docker-compose run $BUILD_ENV ${VOLUMES} ${DAAS_TOOLS_VOLUME} -v ${SOURCEDIR}:$DATADIR -w $DATADIR $BUILDER ${DAAS_TOOLS_BINDIR}/daas-build-helper.sh prepare || return 1
    fi

    # build
    docker-compose run --rm $BUILD_ENV ${VOLUMES} -v ${SOURCEDIR}:$DATADIR -v ${RPMDIR}:/home/$DAAS_BUILD_USER/RPM -w $DATADIR/src $BUILDER $BUILD_CMD || return 1

    # cleanup sources from container
    if [ -n "$BUILD_COPY_SOURCES" ]; then
        docker-compose run --rm -v ${SOURCEDIR}:/$DATADIR -w $DATADIR -u root $BUILDER rm -rf $DATADIR/src
        rm -rf $SOURCEDIR
    fi
    docker-compose down
    cd -

    cd $WORKDIR
}

cleanup_build() {
    echo "Clean..."

    prepare_build_environment "clean"
    cd $BUILDER_DIR
    docker-compose run --rm ${VOLUMES} -v ${SOURCEDIR}:/$DATADIR -v ${RPMDIR}:/home/$DAAS_BUILD_USER/RPM -w $DATADIR -u root -T $BUILDER rm -rf /home/$DAAS_BUILD_USER/RPM/ - 2>/dev/null
    docker-compose down
    cd -
    [ -n "$DAAS_OUTDIR" ] && rm -rf $DAAS_OUTDIR
}

[ -z "$1" ] && module_help && exit 1

case $1 in
    -h | --help | help)
        module_help
        exit 0
        ;;
    --usage | usage)
        module_usage
        exit 0
        ;;
    *)
        break
        ;;
esac

BUILDER="$1"
shift
[ -z "$BUILDER" ] && module_help && exit 1

split_options $@
eval set -- "$OTHER"

case $1 in
    rpmbb)
        run_build $@
        exit $?
        ;;
    clean)
        shift
        cleanup_build $@
        exit $?
        ;;
    *)
        # [ -z "$@" ] && run_build rpmbb || run_build $@
        run_build $@
        exit $?
        ;;
esac
