#!/bin/sh

[ -n "$DAAS_DEBUG" ] && set -x
[ -z "$DAAS_DATADIR" ] && DAAS_DATADIR='..'

. $DAAS_DATADIR/modules.d/.daas-common

PROG="${0##*/}"
RPMS_NAME=''

module_usage() {
    echo "Usage: daas apt <command> [options]"
    echo "Command:"
    echo " prepare source.dir target.dir [--name ext] - copy rpms from source.dir to target.dir/RPMS.ext and generate apt base for 'target.dir/RPMS.ext'"
    echo "                             -n|--name ext  - set component name for target.dir/RPMS.[ext]. (default: projectname)"
}

module_help() {
    module_usage
}

module_error() {
    echo "$1"
    exit 1
}

split_options() {
    RPMS_NAME=''
    OTHER=''
    [ -z "$PROG" ] && PROG="${0##*/}"

    TEMP=$(getopt -n $PROG -o n: -l name: -- "$@") || return 1
    eval set -- "$TEMP"

    while :; do
        case "$1" in
            -n | --name)
                shift
                [ "$1" == '--' ] && break
                RPMS_NAME="$1"
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done

    OTHER=$@
}

do_prepare() {
    echo "Preparing... "
    [ -z "$1" ] && module_error "(${FUNCNAME[0]}): ERROR: source RPMS directory not defined. Use: daas apt --help"
    [ -z "$2" ] && module_error "(${FUNCNAME[0]}): ERROR: target RPMS directory not defined. Use: daas apt --help"

    [ -z "$RPMS_NAME" ] && RPMS_NAME=$(daas-project name)

    RPMSDIR="$1"
    PUBDIR="$2"
    if ! test -d $RPMSDIR; then
        module_error "(${FUNCNAME[0]}): ERROR: Not found directory '$RPMSDIR'"
    fi

    mkdir -p ${PUBDIR}/base || return 1
    mkdir -p ${PUBDIR}/RPMS.${RPMS_NAME} || return 1
    cp -rf ${RPMSDIR}/* ${PUBDIR}/RPMS.${RPMS_NAME}/ || return 1
    genbasedir --progress --topdir=${PUBDIR} ./ || return 1
}

[ -z "$1" ] && module_help && exit 1

split_options $@
eval set -- "$OTHER"

case $1 in
    -h | --help | help)
        module_help
        exit 0
        ;;
    --usage | usage)
        module_usage
        exit 0
        ;;
    --prepare | prepare)
        shift
        do_prepare $@
        exit $?
        ;;
    *)
        module_usage
        exit 1
        ;;
esac
