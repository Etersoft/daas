#!/bin/sh

[ -n "$DAAS_DEBUG" ] && set -x
[ -z "$DAAS_DATADIR" ] && DAAS_DATADIR='..'

. $DAAS_DATADIR/modules.d/.daas-common

BUILDER=

DAAS_BUILD_USER='builder'
DATADIR='/data'

module_usage() {
    echo "daas build - run build command in the container"
    echo "Usage: daas build container_name [ext options] [build_command ..options..]"
    echo "  "
    echo "container_name            - name of builder container (in daas.yml)"
    echo "build_command [options]   - command and options for build in container"
    echo "Ext options:"
    echo "[-e var=val]              - Set an environment variable (can be used multiple times)"
    echo "[-v volume]               - Bind mount a volume (can be used multiple times)"
    echo "--copy-sources            - Build with a copy of the source code. Default: build with current git directory"
}

module_help() {
    module_usage
}

module_error() {
    echo "$1"
    exit 1
}

prepare_sources() {
    COMMIT=$1
    OUTDIR=$2
    #git archive --format=tar $COMMIT | tar xf - -C $OUTDIR
    #rm -rf $OUTDIR/*
    #git archive --format=tar --output $OUTDIR/source.tar.gz $COMMIT

    mkdir -p $OUTDIR/git-$COMMIT

    # для rpmbb нужно, чтобы каталог git тоже копировался (т.к. идёт сборка из git)
    git clone $(git rev-parse --show-toplevel) $OUTDIR/git-$COMMIT
    tar -cf $OUTDIR/source.tar -C $OUTDIR/git-$COMMIT .
    rm -rf $OUTDIR/git-$COMMIT
}

prepare_build_environment() {
    WORKDIR=$(pwd)

    prepare_project_environment

    if ! test -d $DAAS_OUTDIR/$BUILDER; then
        module_error "(${FUNCNAME[0]}): Not found builder '$BUILDER'"
    fi

    BUILDER_DIR=$WORKDIR/$DAAS_OUTDIR/${BUILDER}
    SOURCEDIR="$WORKDIR/$DAAS_OUTDIR/${BUILDER}/${DATADIR}"
}

split_options() {
    VOLUMES=''
    ENVOPTS=''
    OTHER=''
    BUILD_COPY_SOURCES=''
    [ -z "$PROG" ] && PROG="${0##*/}"

    TEMP=$(getopt -n $PROG -o v:,e: -l volume:,environment:,copy-sources -- "$@") || return 1
    eval set -- "$TEMP"

    while :; do
        case "$1" in
            -v | --volume)
                shift
                [ "$1" == '--' ] && break
                VOLUMES="${VOLUMES} -v $1"
                ;;
            -e | --environment)
                shift
                [ "$1" == '--' ] && break
                ENVOPTS="${ENVOPTS} -e $1"
                ;;
            --copy-sources)
                BUILD_COPY_SOURCES="1"
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done

    OTHER=$@
}

do_build() {
    split_options $@

    BUILD_CMD="$OTHER"
    echo "in container '$BUILDER' run build command '$BUILD_CMD'"
    prepare_build_environment

    mkdir -p $SOURCEDIR
    # чтобы пользователь под которым происходит сборка мог писать в этот каталог
    # т.к по умолчанию они монтируются под root
    chmod a+rw ${SOURCEDIR}

    COMMIT=$(git log -1 --pretty=format:"%h")
    GIT_ROOT=$(git rev-parse --show-toplevel)
    if [ -n "$BUILD_COPY_SOURCES" ]; then
        cd $GIT_ROOT
        prepare_sources "$COMMIT" "$SOURCEDIR"
        cd -
    else
        VOLUMES="$VOLUMES -v $GIT_ROOT:$DATADIR/src"
    fi

    BUILD_ENV="-e DAAS_BUILD_USER=$DAAS_BUILD_USER -e DATADIR=$DATADIR -e SOURCE=$DATADIR/source.tar -e DAAS_DEBUG=$DAAS_DEBUG $ENVOPTS"

    cd $DAAS_OUTDIR/$BUILDER
    docker-compose build --build-arg USER_UID=$(id -u) --force-rm || return 1

    # prepare sources
    if [ -n "$BUILD_COPY_SOURCES" ]; then
        docker-compose run $BUILD_ENV ${DAAS_TOOLS_VOLUME} $VOLUMES -v ${SOURCEDIR}:$DATADIR -w $DATADIR $BUILDER ${DAAS_TOOLS_BINDIR}/daas-build-helper.sh prepare || return 1
    fi

    # build
    docker-compose run --rm $BUILD_ENV $VOLUMES -v ${SOURCEDIR}:$DATADIR -w $DATADIR/src $BUILDER $BUILD_CMD || return 1

    # cleanup sources from container
    if [ -n "$BUILD_COPY_SOURCES" ]; then
        docker-compose run --rm -v ${SOURCEDIR}:/$DATADIR -w $DATADIR -u root $BUILDER rm -rf $DATADIR/src
        rm -rf $SOURCEDIR
    fi
    docker-compose down
    cd -

    cd $WORKDIR
}

[ -z "$1" ] && module_help && exit 1

case $1 in
    -h | --help | help)
        module_help
        exit 0
        ;;
    --usage | usage)
        module_usage
        exit 0
        ;;
    *)
        break
        ;;
esac

BUILDER="$1"
shift
[ -z "$BUILDER" ] && module_help && exit 1

case $1 in
    rpmbb)
        do_build $@
        exit $?
        ;;
    *)
        do_build $@
        exit $?
        ;;
esac
