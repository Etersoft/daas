#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import yaml
import re


def check_arg_param(argv, param):
    plist = list()
    if isinstance(param, list):
        plist = param
    else:
        plist.append(param)

    for i in range(0, len(argv)):
        if argv[i] in plist:
            return True

    return False


def get_arg_param(argv, param, defval=""):
    plist = list()
    if isinstance(param, list):
        plist = param
    else:
        plist.append(param)

    for i in range(0, len(argv)):
        if argv[i] in plist:
            if i + 1 < len(argv):
                return argv[i + 1]
            else:
                break

    return defval


def load_config(confile):
    conf = None
    with open(confile) as stream:
        try:
            conf = yaml.load(stream)
        except yaml.YAMLError as ex:
            print(ex)
            exit(1)

    if 'version' not in conf:
        print "ERROR: Unknown config file format for '%s'. Supported by %s" % (confile, FORMAT_VERSION)
        exit(1)

    return conf


def get_element(path, root_object):
    """

    :param path: 'root.section1.section2.section3.xxx'
    :param obj:  yaml object
    :return: obj['root']['section1']['section2'][xxx]
    """

    element = root_object
    items = path.split('.')
    for i in items:
        if i not in element:
            return None
        element = element[i]

    return element


def get_root_section_name(cname):
    if not cname or len(cname) == 0:
        return ''

    fname = str(cname)
    root = ''
    if fname.startswith('['):
        end_pos = fname.find(']')
        if end_pos == -1:
            print "ERROR: bad filename '%s'. Found '[' but not found ']'" % fname
            exit(1)

        root = fname[1:end_pos]
        fname = fname[end_pos + 1:]

    return [fname, root]


def deepupdate(original, update):
    """
    https://stackoverflow.com/questions/38987/how-to-merge-two-dictionaries-in-a-single-expression
    Recursively update a dict.
    Subdict's won't be overwritten but also updated.
    """
    for key, value in original.iteritems():
        if key not in update:
            update[key] = value
        elif isinstance(value, dict):
            if not update[key]:
                update[key] = value
            else:
                deepupdate(value, update[key])

    return update


def merge_configs(configfile1, configfile2):
    confname1, root1 = get_root_section_name(configfile1)
    confname2, root2 = get_root_section_name(configfile2)

    conf1 = load_config(confname1)
    conf2 = load_config(confname2)

    if conf1['version'] != conf2['version']:
        print "ERROR: Files have different versions '%s'(%s)  != '%s'(%s')" % \
              (conf1['version'], configfile1, conf2['version'], configfile2)
        exit(1)

    c1 = conf1 if not root1 else get_element(root1, conf1)
    c2 = conf2 if not root2 else get_element(root2, conf2)
    deepupdate(c1, c2)
    return conf2


def pretty_output(conf, outfile=None):
    out = yaml.dump(conf, default_flow_style=False, indent=2).split('\n')
    outlines = list()

    prev_line = None
    for line in out:

        # Move the version to the top (after '---')
        if line.startswith('version'):
            outlines.insert(0, line)
            outlines.insert(1, '')
            continue

        outlines.append(re.sub(r'^(\s{0,2})(\w+)', '\n\\1\\2', line))

    # print header '---'
    if len(outlines) > 0 and not outlines[0].startswith('---'):
        outlines.insert(0, '---')

    if not outfile:
        for line in outlines:
            print line
    else:
        with open(outfile, 'w') as f:
            for line in outlines:
                f.write(line + '\n')


def split_options(beg):
    options = list()
    args = list()

    i = int(beg)
    argc = len(sys.argv)
    while i < argc:

        if sys.argv[i].startswith('--'):
            if i + 1 < len(sys.argv):
                options.append(sys.argv[i])
                options.append(sys.argv[i + 1])
                i = i + 1
        else:
            args.append(sys.argv[i])

        i = i + 1

    return [options, args]


def usage():
    print "daas-config command [options]"
    print ""
    print "Commands:"
    print "---------"
    print "merge [root]base-config.yml [root]user-config.yml - Merge configs ('user' on top of 'base')."
    print "                                                    'root' - path for merge. Format: 'root.subsection1.subsection2.xxx'"


if __name__ == "__main__":

    if check_arg_param(sys.argv, ['--help', '-h']):
        usage()
        exit(0)

    if len(sys.argv) < 2:
        usage()
        exit(-1)

    cmd = sys.argv[1].strip().lower()

    options, args = split_options(2)

    if cmd == "merge":
        if len(args) < 2:
            usage()
            exit(-1)

        merged_conf = merge_configs(args[0], args[1])

        if merged_conf:
            outfile = get_arg_param(options, '--output', '')
            pretty_output(merged_conf, outfile)
