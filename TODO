1. Название виртуальной сети у каждого стенда должно быть своё (vagrant)
2. Конф. файл для gitlab-runner должен генерироваться
3. Настройка для docker (/etc/docker/...) должен генерироваться
4. /etc/hosts (для доступа к внутренним машинам)
или DNS внутри ВМ? посмотреть, что это https://github.com/aacebedo/dnsdock


5. Наличие модуля charbridge внутри ВМ (загрузка в /etc/modules и создание устройств)
6. На этапе разворачивания стенда, нужно залить или собрать образы для контрллеров и GUI
и залить из в локальный docker-регистр (vagrant?)

7. Имя gitlab-runner-а при регистрации в gitlab,  должно включать в себя (название проекта)
8. Подумать насчёт генерировать "скелет" для gitlab-ci.yml

9. Сейчас образы для сборки x64. Надо сделать и для i586 (докер образы)

10. Продумать как будет осуществляться запуск нескольких стендов.
Может стоит запускать несколько стендов и распределять pipeline между ними
(надо проверить все одинаковые runner-ы запускают задачи или только один из них)

11. Возможно надо делать несколько попыток устанавливать пакеты в Dockerfile (было пару раз, когда был недоступен ftp)

13. Стоит ли сделать отдельную поддержку запуска сервисов (возможно через serv, чтобы работало и в init и в systemd)
  run_services:
     - serv1
     - serv2
     - serv3

14. Продумать насчёт периодического запуска по cron "docker prune" для чистки ненужных или промежуточных образов
(пока что включил просто в gitlab-ci стадия cleanup).
15. Возможность задать в файле проекта, свои пути для поиска шаблонов,addons и т.п
16. Подумать насчёт сделать формат универсальным. Перечислять вначале группы узлов или сделать "groups:" (nodetypes:)
и по ним генерировать всё. Т.е. не как сейчас "жёстко заданные группы" controller, gui, tester.

17. daas admin hosts --confile project.yml    - генерирование hosts файла
18. daas init gitlab-ci --confile project.yml - генерирование скелета конф. файла для gitlab-ci
19. daas init [projectname] - генерирование шаблонного файла для проекта

22. Продумать скрипт архивирующий образ указанного узла (или всех). Со всеми Dockerfile и т.п.
Смысл в том, что потом можно было взять этот "срез" образов конкретного коммита и развернуть где-нибудь ещё.
Другой вариант, это архивировать только исходные данные и конф. файлы необходимые для поднятия "стенда".
Хотя формально это сейчас уже и так сохраняется в artefacts (gitlab-ci).
Попутно здесь можно сделать команду "запушить" в docker-registry текущий образы по специальными именами 
(например передавать скрипту COMMIT_SHA в качестве уникального префикса или постфикса).

23. Продумать линтер для конф. файла
daas check project.yml

24. Подумать насчёт объединить конфиги "vnc.d" и "logdb.d" для nginx в одну папку "project-name.d"

25. Продумать возможность использовать в файле проекта "переменные" типа {{project_name}},{{vstand_hostname}}, etc

26. Специальные контейнеры logdb и nginx в целом похожи на обчные узлы. Надо подумать об унификации их инициализации.
Т.е. чтобы они были как обычные узлы (входили в список project['nodes']), просто дополнительно конфигурировались
отдельными функциями (свой dockerfile, свои доп. файлы).

27. daas ssh config - генерирование config для ~/.ssh/config

28. Разделить Dockerfile-шаблоны (tpl) на базовую часть и дополнительные. Используя возможности "include"
в системе jinja2.  Тогда docker сможет использовать закушированные слои если у всех будут одинаковые части.

29. Если у узла skip_compose: yes  нужно ли тогда требовать наличие свойства 'ip'.
Похоже 'ip' можно сделать не обязательным и не включать тогда узел в сеть.
Тоже самое можно продумать на тему "обязательности" секции network 
(для проектов где только один узел или все skip_compose). Правда тогда непонятно зачем использовать daas
